openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD21071
servers:
  - url: https://library.com
tags:
  - Books
  - Authors 
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Returned all books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDateTime
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: endDateTime
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          description: Page number for pagination 
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page 
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
   
    put:
      tags:
       - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Update author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: ID of a book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the new author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author of the book updated successfully

  /books/authors:
    put:
      tags:
        - Books
      summary: Update book authors
      operationId: updateBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Book authors updated successfully



  /authors:
    get:
      tags:
        - Authors
      summary: Get authors
      description: Filter authors by name
      operationId: getAuthors
      parameters:
        - in: query
          name: name
          description: Filter authors by name
          required: false
          schema:
            type: string
        - in: path
          name: page
          description: Page number for pagination (default is 1)
          required: true
          schema:
            type: integer
            default: 1
        - in: path
          name: pageSize
          description: Number of items per page (default is 50)
          required: true
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of authors filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'

    put:
      tags:
       - Authors    
      summary: Update authors
      description: Update a list of authors
      operationId: UpdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: List of authors updated 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author' 
  /authors/{authorId}:
    delete:
      tags:
       - Authors
      summary: Delete author
      description: Delete a specific author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully


components:
  parameters:
    queryPagination:
      name: page
      in: query
      description: Page number for pagination (default is 1)
      required: false
      schema:
        type: integer
        default: 1

    pathPagination:
      name: page
      in: path
      description: Page number for pagination (default is 1)
      required: true
      schema:
        type: integer
        default: 1

  schemas:
    Book:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/author'
      allOf:
        - $ref: '#/components/schemas/crupdateBooks'
     
    
    author:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F  
    Topic:
      type: string
      enum:
        - ROMANCE
        - COMEDY
        - OTHER
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    crupdateBooks: 
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        topic:
          $ref: '#/components/schemas/Topic'
        pageNumbers:
          $ref: '#/components/schemas/PageSize'
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
