openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD21071
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors 
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: Returned all books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDateTime
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: endDateTime
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
        - in: query
          name: pagesize
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
      responses:
        '200':
          $ref: '#/components/responses/BookList_200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
   
    put:
      tags:
       - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'


    post:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'


  /books/import:
    post:
      tags:
        - Books
      summary: Import books
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BookImport'  # Schéma des livres à importer au format JSON
      responses:
        '200':
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'


  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Update author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: ID of a book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: ID of the new author
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author of the book updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/crupdateBooks'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'


  /books/authors:
    put:
      tags:
        - Books
      summary: Update book authors
      operationId: updateBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Book authors updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpdateBookAuthor'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'


  /authors:
    get:
      tags:
        - Authors
      summary: Get authors
      description: Filter authors by name
      operationId: getAuthors
      parameters:
        - in: query
          name: name
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of authors filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /authors/import:
    post:
          tags:
            - Authors
          summary: Import authors
          operationId: importAuthors
          requestBody:
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AuthorImport'
          responses:
            '200':
              description: List of imported authors
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/author' 
            '400':
              $ref: '#/components/responses/400'
            '403':
              $ref: '#/components/responses/403'
            '500':
              $ref: '#/components/responses/500'
    put:
      tags:
       - Authors    
      summary: Update authors
      description: Update a list of authors
      operationId: UpdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: List of authors updated 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author' 
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /authors/page/{page}/pagesize/{pagesize}:
     get:
      summary: Get author by name
      description: Get list of authors filtered.
      operationId: getByNameAuth
      tags:
        - Authors
      parameters:
        - name: page 
          in: path  
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
          required: true
        - name: pagesize
          in: path
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
          required: true
        - in: query
          name: name
          description: Name of authors filtered
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The list of books filtered 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /authors/{authorId}:
    delete:
      tags:
       - Authors
      summary: Delete author
      description: Delete a specific author
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/author'

components:
  parameters:
    QueryPagination:
      name: queryPagination
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          page_size:
            type: integer
            default: 50
    PathPagination:
      name: queryPagination
      in: path
      description: pagination parametters.
      required: true
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
            description: page number.
          page_size:
            type: integer
            default: 50
            description: Page size

  responses:
    AuthorList:
      description: Authors lists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/authorListBody'
    BookList_200:
      description: Books lists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'  
    500:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'  
  schemas:
    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: { }
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: { }
    InternationalServerError:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: SERVER ERROR
        body: { }
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    authorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/author'
    Book:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/author'
      allOf:
        - $ref: '#/components/schemas/crupdateBooks'
    author:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F  
    Topic:
      type: string
      enum:
        - ROMANCE
        - COMEDY
        - OTHER
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    crupdateBooks: 
      type: object
      properties:
        bookName:
          type: string
        topic:
            $ref: '#/components/schemas/Topic'
        
        pageNumbers:
          $ref: '#/components/parameters/QueryPagination'
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    BookImport:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/author'  
        pageNumbers:
          $ref: '#/components/schemas/PageSize'
        topic:
          $ref: '#/components/schemas/Topic'
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
    AuthorImport:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'




    